{"version":3,"sources":["IntroPage.js","Option.js","Question.js","QuestionsPage.js","App.js","reportWebVitals.js","index.js"],"names":["IntroPage","props","className","onClick","start","Option","styles","backgroundColor","allSelected","correctAns","value","getAns","isSelected","border","opacity","type","selectOpt","style","disabled","Question","React","useState","option","map","options","setOptions","optionElements","userAns","id","prevOpt","opt","selected","answer","question","QuestionsPage","questions","Array","fill","answers","setAnswer","localAllSelected","JSON","parse","localStorage","getItem","console","log","setAllSelected","score","setScore","setUserAns","ans","data","slice","questionElements","arr","incorrect_answers","unshift","correct_answer","shuffledArr","array","i","length","j","Math","floor","random","getShuffledArr","filter","x","a","indexOf","setItem","changeState","prevScore","alert","App","localState","setQuestions","setStart","setState","stringify","prevState","useEffect","fetch","then","res","json","results","state","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5df5b0d2.chunk.js","sourcesContent":["export default function IntroPage(props) {\n    return (\n        <div className=\"intro-page\">\n\n            <h1>Quizzical</h1>\n            <p>Some description if needed</p>\n            <button className=\"start-btn\" onClick={props.start}>Start quiz</button>\n\n        </div>\n    )\n}\n","export default function Option(props) {\n\n    const styles = {\n        backgroundColor: props.allSelected ? \n            props.correctAns === props.value ? \"#94D7A2\" : props.getAns === props.value ? \"#F8BCBC\" : \"transparent\" :\n            props.isSelected ? \"#D6DBF5\" : \"transparent\" ,\n        border: props.allSelected ? props.correctAns === props.value ? \"none\" : props.getAns === props.value ? \"none\" : \"\" : props.isSelected ? \"none\" : \"\" ,\n        opacity: props.allSelected ? props.correctAns === props.value ? \"\" : \"45%\" : \"\"\n    }\n\n\n    return (\n        <input type=\"button\" value={props.value} onClick={props.selectOpt} style={styles} disabled={props.allSelected && \"disabled\"}/>\n    )\n}","import React from \"react\"\nimport Option from \"./Option\"\n\nexport default function Question(props) {\n\n    const [options, setOptions] = React.useState(ThisOptions())\n  \n    function ThisOptions() {\n        const newOptions = props.option.map(option => ({\n            value: option,\n            isSelected: false\n        }))\n        return newOptions\n    }\n\n    function setOption(value) {\n        props.userAns(props.id,value)\n        // console.log(answer)\n        setOptions(prevOpt => prevOpt.map(opt => {\n            return opt.value === value ? {...opt, isSelected: !opt.isSelected} : {...opt, isSelected: false}\n        }))\n    }\n\n    \n\n    const optionElements = options.map(option => <Option \n                                            value={option.value}\n                                            isSelected={option.isSelected}\n                                            selectOpt={() => setOption(option.value)}\n                                            allSelected={props.selected}\n                                            getAns={props.getAns}\n                                            correctAns={props.answer}\n                                        />)\n\n    return (\n        <div className=\"question\">\n            <p>{props.question}</p>\n            <div className=\"options\">\n                {optionElements}\n            </div>\n            <hr />\n        </div>\n    )\n}","import React from \"react\";\nimport Question from './Question'\n// import nanoid from 'nano-id'\n\nexport default function QuestionsPage(props) {\n\n    const [questions, setQuestions] = React.useState(props.questions)\n    // setQuestions(props.questions)\n    const [answers, setAnswer] = React.useState(Array(5).fill(null))\n\n    const localAllSelected = JSON.parse(localStorage.getItem(\"allSelected\"))\n    console.log(\"localAllSelected = \" + localAllSelected)\n    const [allSelected, setAllSelected] = React.useState(localAllSelected)\n    // const [state, setState] = React.useState(props.state)\n    const [score, setScore] = React.useState(0)\n    /* const newState = localStorage.getItem(\"state\") */\n\n    /* React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&category=21&difficulty=easy\")\n            .then(res => res.json())\n            .then(data => setQuestions(data.results))\n    }, []\n    ) */\n\n    function getShuffledArr(array) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n\n        return array\n    }\n\n    function setUserAns(id, ans) {\n        setAnswer(data =>\n            [...data.slice(0, id), ans, ...data.slice(id + 1)]\n        )\n\n        // console.log(ans + \" Hi\")\n        // console.log(id)\n    }\n\n    // console.log(answers)\n\n    /* function addScore() {\n        setScore(prevScore => prevScore + 1)\n        console.log(score)\n    }\n    console.log(score) */\n\n    // console.log(questions)\n\n    /* const questionsData = questions */\n\n    const questionElements = questions.map(data => {\n        let arr = data.incorrect_answers\n        arr.unshift(data.correct_answer)\n        const shuffledArr = getShuffledArr(arr.filter((x, i, a) => a.indexOf(x) === i))\n        const id = questions.indexOf(data)\n        return (\n            <Question\n                id={id}\n                question={data.question}\n                option={shuffledArr}\n                answer={data.correct_answer}\n                userAns={setUserAns}\n                selected={allSelected}\n                getAns={answers[id]}\n            />\n        )\n    })\n\n    function checkAnswers() {\n        if (answers.length === questions.length) {\n\n            setAllSelected(true)\n            \n            for (let i = 0; i < questions.length; i++) {\n                if (answers[i] === questions[i].correct_answer) {\n                    setScore(prevScore => prevScore + 1)\n                }\n            }\n            // alert(`You have answered ${score} question correctly`)\n            // console.log(\"Success\")\n        }\n        else {\n            alert(\"Please answer all the questions!\")\n        }\n        \n    }\n    localStorage.setItem(\"allSelected\", allSelected)\n\n    return (\n        <div>\n            <div className=\"questions-page\">\n                {questionElements}\n            </div>\n            {!allSelected ?\n                <div className=\"result\">\n                    {questions.length > 0 && <button className=\"check-ans-btn\" onClick={checkAnswers}>Check answers</button>}\n                </div> :\n                <div className=\"result\">\n                    <h3>You scored {score}/{questions.length} correct answers</h3>\n                    <button className=\"check-ans-btn\" onClick={props.changeState}>Play again</button>\n                </div>\n            }\n        </div>\n    )\n}","import React from 'react'\nimport IntroPage from './IntroPage';\nimport QuestionsPage from './QuestionsPage';\nimport './App.css';\n\nfunction App() {\n  const localState = JSON.parse(localStorage.getItem(\"state\"))\n  // console.log(\"localState = \" + localState)\n\n  const [questions, setQuestions] = React.useState([])\n  // localStorage.setItem(\"questions\", JSON.stringify(questions))\n /*  React.useEffect(() => \n\n  )\n */\n\n  const [start, setStart] = React.useState(localState)\n\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&category=21&difficulty=easy\")\n        .then(res => res.json())\n        .then(data => setQuestions(data.results))\n  }, [])\n\n  // console.log(start)\n\n  function setState() {\n    console.log(\"start \" + start)\n    localStorage.setItem(\"allSelected\", false)\n    if(start === null || start === false)\n      localStorage.setItem(\"questions\",JSON.stringify(questions))\n      // console.log(JSON.parse(localStorage.getItem(\"questions\")))\n\n    setStart(prevState => prevState === null || prevState === false ? true : false)\n\n    /* const newState = JSON.parse(localStorage.getItem(\"state\"))\n    localStorage.setItem(\"state\", newState)\n    setStart(prevState => !prevState) */\n  }\n\n\n  localStorage.setItem(\"state\", start)\n  console.log(start)\n  \n  return (\n    <div className=\"App\">\n      {!start && <IntroPage start={setState} />}\n      {start && <QuestionsPage \n        state={start}\n        changeState={setState}\n        questions={JSON.parse(localStorage.getItem(\"questions\"))}\n      />}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}